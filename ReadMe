# A95 Max (S905X2) Android 9 - Custom Firmware with LAN Fix via DTBO

This project covers a custom bootloader and firmware configuration for the **A95 Max** Android TV Box, which uses the **Amlogic S905X2** chipset and ships with Android 9. The stock firmware for this box is Android 8.1, but it can be upgraded using parts from a similar box, the **A95 F2**.

---

## üîê Bootloader Modding

Both **A95 Max** and **A95 F2** share the same **RSA** and **AES** secure boot keys, which allows for bootloader and firmware component interchange with some tweaks.

### Why This Works

- **A95 Max's `bl2.bin`** disables secure FIP checks.
- **A95 F2** components (kernel, DTB, etc.) can be used after `bl2.bin` from **A95 Max** is loaded.
- Must use **A95 Max's `bl2.bin`** because its `asc.bin` includes correct DDR timing.

### Bootloader Composition

- `bl2.bin` from **A95 Max**  
- All other bootloader parts (e.g. FIP, kernel, DTB) from **A95 F2**

### Result

- System boots and runs fine  
- Only issue: **LAN (Gigabit) doesn't work**

---

## ‚ö†Ô∏è LAN Compatibility Issue

- **A95 Max** uses external **RTL8211F (Gigabit)** LAN chip  
- **A95 F2** uses SoC-integrated **100M LAN** or internal PHY  
- Cannot change DTB or kernel directly due to secure signing (RSA)

---

## ‚úÖ Workaround Using DTBO

The **Device Tree Blob Overlay (DTBO)** is not encrypted, and it's loaded during boot to override parts of the original DTB.

This allows patching the Ethernet configuration to enable support for the RTL8211F chip.

### DTBO Example: Override Ethernet Node

```dts
/dts-v1/;

/ {
    fragment@0 {
        target-path = "/";

        __overlay__ {
            ethernet@ff3f0000 {
                compatible = "amlogic, g12a-eth-dwmac\0snps,dwmac";
                reg = <0xff3f0000 0x10000 0xff634540 0x08 0xff64c000 0xa0>;
                reg-names = "eth_base\0eth_cfg\0eth_pll";
                interrupts = <0x00 0x08 0x01>;
                interrupt-names = "macirq";
                status = "okay";
                clocks = <0x02 0x38>;
                clock-names = "ethclk81";
                pll_val = <0x9c0040a 0x927e0000 0xac5f49e5>;
                analog_val = <0x20200000 0xc000 0x23>;
                pinctrl-names = "external_eth_pins";
                pinctrl-0 = <0xbd>;
                pinctrl-1 = <0x12>;
                mc_val = <0x1621>;
                internal_phy = <0x00>;
                phandle = <0x99>;
            };
        };
    };

    fragment@1 {
        target-path = "/";

        __overlay__ {
            dummy-charger {
                compatible = "amlogic, dummy-charger";
                status = "okay";
            };
        };
    };
};
```

---

## üõ†Ô∏è Building the DTBO

You don't need kernel source. Use the `dtc` tool (Device Tree Compiler):

```bash
dtc -@ -O dtb -o f2_max.dtbo -b 0 dtbo.dts
```

This will generate a **dtbo image**, but it **lacks the 64-byte header** required by Amlogic devices.

### Fix Header

Extract header from a known working `dtbo.PARTITION`:

```bash
dd if=dtbo.PARTITION of=header_dtbo bs=64 count=1
```

Then prepend it:

```bash
cat header_dtbo f2_max.dtbo > dtbo.PARTITION
```

---

## üöÄ Flashing the DTBO

You can flash the modified `dtbo.PARTITION` using:

- Amlogic **update tool**
- DFU / USBDL / Fastboot mode
- Or include it in a full firmware image

---

## üìÜ Modded Firmware

[Download Custom Firmware](https://drive.google.com/file/d/1OtjK0Lo65siEiHLkZ6yQn6SCZpuUkmWc/view?usp=drive_link)

